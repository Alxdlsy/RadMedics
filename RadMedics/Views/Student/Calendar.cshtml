@using System.Linq
@{
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
    ViewData["Title"] = "Calendar";
    var currentMonth = ViewBag.CurrentMonth ?? DateTime.Now;
    var events = ViewBag.Events ?? new List<RadMedics.Models.CalendarEvent>();
    var calendarDays = ViewBag.CalendarDays ?? new List<RadMedics.Models.CalendarDayViewModel>();
    var weeks = ViewBag.Weeks ?? 5;
}

<style>
    .calendar-container {
        padding: 20px;
        background: #f8f9fa;
        min-height: 100vh;
    }
    
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }
    
    .calendar-title {
        font-size: 2rem;
        font-weight: 600;
        color: #00173D;
    }
    
    .month-navigation {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    
    .nav-link {
        color: #5FB0FA;
        text-decoration: none;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .nav-link:hover {
        color: #3498db;
    }
    
    .current-month {
        font-size: 1.2rem;
        color: #666;
        font-weight: 500;
    }
    
    .calendar-grid {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .calendar-header-row {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        background: #00173D;
        color: white;
    }
    
    .calendar-header-cell {
        padding: 15px 10px;
        text-align: center;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .calendar-body {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }
    
    .calendar-day {
        min-height: 80px;
        padding: 8px;
        border: 1px solid #e9ecef;
        cursor: pointer;
        position: relative;
        transition: background-color 0.2s;
    }
    
    .calendar-day:hover {
        background-color: #f8f9fa;
    }
    
    .calendar-day.other-month {
        background-color: #f8f9fa;
        color: #adb5bd;
    }
    
    .calendar-day.today {
        background-color: #5FB0FA;
        color: white;
    }
    
    .calendar-day.today:hover {
        background-color: #3498db;
    }
    
    .day-number {
        font-weight: 600;
        margin-bottom: 5px;
    }
    
    .event-indicator {
        font-size: 0.7rem;
        color: #e74c3c;
        font-weight: 600;
        margin-top: 2px;
    }
    
    .event-title {
        font-size: 0.7rem;
        color: #333;
        background: #e8f4fd;
        padding: 2px 4px;
        border-radius: 3px;
        margin-top: 2px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    
    .modal-content {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 25px 15px 25px;
        border-bottom: 1px solid #e9ecef;
    }
    
    .modal-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #00173D;
    }
    
    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .close-btn:hover {
        color: #333;
    }
    
    .modal-body {
        padding: 20px 25px 25px 25px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
    }
    
    .form-label.required::after {
        content: " - Required";
        color: #e74c3c;
        font-size: 0.8rem;
    }
    
    .form-input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 0.95rem;
    }
    
    .form-input:focus {
        outline: none;
        border-color: #5FB0FA;
        box-shadow: 0 0 0 2px rgba(95, 176, 250, 0.2);
    }
    
    .date-time-group {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 8px;
        align-items: center;
    }
    
    .date-time-group input {
        text-align: center;
    }
    
    .date-time-group select {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .radio-group {
        display: flex;
        gap: 20px;
        margin-top: 8px;
    }
    
    .radio-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .radio-item input[type="radio"] {
        margin: 0;
    }
    
    .duration-inputs {
        margin-top: 10px;
        display: none;
    }
    
    .duration-inputs.show {
        display: block;
    }
    
    .checkbox-item {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 8px;
    }
    
    .checkbox-item input[type="checkbox"] {
        margin: 0;
    }
    
    .repeat-controls {
        margin-top: 10px;
        display: none;
    }
    
    .repeat-controls.show {
        display: block;
    }
    
    .repeat-input {
        width: 60px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
    }
    
    .modal-footer {
        padding: 15px 25px 25px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #e9ecef;
    }
    
    .required-note {
        font-size: 0.8rem;
        color: #666;
    }
    
    .save-btn {
        background: #5FB0FA;
        color: white;
        border: none;
        padding: 10px 25px;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    
    .save-btn:hover {
        background: #3498db;
    }
    
    .save-btn:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    
    .error-message {
        color: #e74c3c;
        font-size: 0.8rem;
        margin-top: 5px;
        display: none;
    }
    
    .time-group {
        display: flex;
        gap: 10px;
        margin-top: 5px;
    }
    
    .time-group select {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .event-summary {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        background: #f9f9f9;
    }
    
    .event-details {
        margin-bottom: 15px;
    }
    
    .event-field {
        margin-bottom: 8px;
        font-size: 14px;
    }
    
    .event-actions {
        display: flex;
        gap: 10px;
    }
    
    .edit-btn, .delete-btn, .add-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        display: inline-block;
        text-decoration: none;
        text-align: center;
        min-width: 60px;
    }
    
    .edit-btn {
        background: #007bff;
        color: white !important;
    }
    
    .edit-btn:hover {
        background: #0056b3;
    }
    
    .delete-btn {
        background: #dc3545;
        color: white !important;
    }
    
    .delete-btn:hover {
        background: #c82333;
    }
    
    .add-btn {
        background: #28a745;
        color: white !important;
        margin-top: 15px;
        padding: 10px 20px;
    }
    
    .add-btn:hover {
        background: #218838;
    }
    
    .summary-actions {
        margin-top: 20px;
        text-align: center;
    }
    
    .edit-event-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .edit-event-item input[type="radio"] {
        margin-right: 10px;
    }
    
    .edit-event-item label {
        cursor: pointer;
        flex: 1;
    }
    
    .events-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }
    
    .events-header {
        display: flex;
        background: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        font-weight: bold;
        color: #495057;
    }
    
    .event-row {
        display: flex;
        border-bottom: 1px solid #dee2e6;
        padding: 10px 0;
    }
    
    .event-row:hover {
        background: #f8f9fa;
    }
    
    .event-col {
        flex: 1;
        padding: 8px 12px;
        display: flex;
        align-items: center;
    }
    
    .event-col:last-child {
        justify-content: flex-start;
        gap: 15px;
    }
    
    .event-col .edit-btn, .event-col .delete-btn {
        padding: 4px 8px;
        margin: 0 2px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
    }
    
    .event-col .edit-btn {
        background: #007bff;
        color: white;
    }
    
    .event-col .edit-btn:hover {
        background: #0056b3;
    }
    
    .event-col .delete-btn {
        background: #dc3545;
        color: white;
    }
    
    .event-col .delete-btn:hover {
        background: #c82333;
    }
</style>

<div class="calendar-container">
    <div class="calendar-header">
        <div class="calendar-title">Calendar</div>
        <div class="month-navigation">
            <a href="#" class="nav-link" onclick="changeMonth(-1)">
                <span>‹</span> @currentMonth.AddMonths(-1).ToString("MMMM yyyy")
            </a>
            <div class="current-month">@currentMonth.ToString("MMMM yyyy")</div>
            <a href="#" class="nav-link" onclick="changeMonth(1)">
                @currentMonth.AddMonths(1).ToString("MMMM yyyy") <span>›</span>
            </a>
        </div>
    </div>
    
    <div class="calendar-grid">
        <div class="calendar-header-row">
            <div class="calendar-header-cell">MON</div>
            <div class="calendar-header-cell">TUE</div>
            <div class="calendar-header-cell">WED</div>
            <div class="calendar-header-cell">THU</div>
            <div class="calendar-header-cell">FRI</div>
            <div class="calendar-header-cell">SAT</div>
            <div class="calendar-header-cell">SUN</div>
        </div>
        <div class="calendar-body" id="calendarBody">
            @{
                var dayIndex = 0;
                for (int week = 0; week < weeks; week++)
                {
                    for (int dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++)
                    {
                        if (dayIndex < calendarDays.Count)
                        {
                            var day = calendarDays[dayIndex];
                            
                            if (day.IsEmpty)
                            {
                                <div class="calendar-day other-month"></div>
                            }
                            else
                            {
                                <div class="calendar-day @(day.IsToday ? "today" : "")" 
                                     onclick="showDaySummary('@day.Date', @day.DayNumber)">
                                    <div class="day-number">@day.DayNumber</div>
                                    @if (day.Events.Count > 0)
                                    {
                                        var eventCount = 0;
                                        foreach (var evt in day.Events)
                                        {
                                            if (eventCount < 2)
                                            {
                                                <div class="event-title">@evt.Title</div>
                                                eventCount++;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        @if (day.Events.Count > 2)
                                        {
                                            <div class="event-indicator">+@(day.Events.Count - 2) more</div>
                                        }
                                    }
                                </div>
                            }
                            dayIndex++;
                        }
                    }
                }
            }
        </div>
    </div>
</div>

<!-- Event Creation Modal -->
<div class="modal-overlay" id="eventModal">
    <div class="modal-content">
        <div class="modal-header">
            <div class="modal-title">New event</div>
            <button class="close-btn" onclick="closeEventModal()">×</button>
        </div>
        <div class="modal-body">
            <form id="eventForm">
                <div class="form-group">
                    <label class="form-label required">Event title</label>
                    <input type="text" class="form-input" id="eventTitle" required>
                    <div class="error-message" id="titleError">This field is required</div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Date</label>
                    <div class="date-time-group">
                        <select id="eventMonth" required>
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                        <select id="eventDay" required>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                            <option value="9">9</option>
                            <option value="10">10</option>
                            <option value="11">11</option>
                            <option value="12">12</option>
                            <option value="13">13</option>
                            <option value="14">14</option>
                            <option value="15">15</option>
                            <option value="16">16</option>
                            <option value="17">17</option>
                            <option value="18">18</option>
                            <option value="19">19</option>
                            <option value="20">20</option>
                            <option value="21">21</option>
                            <option value="22">22</option>
                            <option value="23">23</option>
                            <option value="24">24</option>
                            <option value="25">25</option>
                            <option value="26">26</option>
                            <option value="27">27</option>
                            <option value="28">28</option>
                            <option value="29">29</option>
                            <option value="30">30</option>
                            <option value="31">31</option>
                        </select>
                        <input type="number" class="form-input" id="eventYear" value="2024" readonly>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Time</label>
                    <div class="time-group">
                        <select id="eventHour" required>
                            <option value="0">12 AM</option>
                            <option value="1">1 AM</option>
                            <option value="2">2 AM</option>
                            <option value="3">3 AM</option>
                            <option value="4">4 AM</option>
                            <option value="5">5 AM</option>
                            <option value="6">6 AM</option>
                            <option value="7">7 AM</option>
                            <option value="8">8 AM</option>
                            <option value="9">9 AM</option>
                            <option value="10">10 AM</option>
                            <option value="11">11 AM</option>
                            <option value="12">12 PM</option>
                            <option value="13">1 PM</option>
                            <option value="14">2 PM</option>
                            <option value="15">3 PM</option>
                            <option value="16">4 PM</option>
                            <option value="17">5 PM</option>
                            <option value="18">6 PM</option>
                            <option value="19">7 PM</option>
                            <option value="20">8 PM</option>
                            <option value="21">9 PM</option>
                            <option value="22">10 PM</option>
                            <option value="23">11 PM</option>
                        </select>
                        <select id="eventMinute" required>
                            <option value="0">00</option>
                            <option value="15">15</option>
                            <option value="30">30</option>
                            <option value="45">45</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Type of event</label>
                    <select id="eventType" required>
                        <option value="">Select event type</option>
                        <option value="Assignment">Assignment</option>
                        <option value="Quiz">Quiz</option>
                        <option value="Activity">Activity</option>
                        <option value="Meeting">Meeting</option>
                    </select>
                    <div class="error-message" id="typeError">Please select an event type</div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea class="form-input" id="eventDescription" rows="4" placeholder="Enter event description..."></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Location</label>
                    <input type="text" class="form-input" id="eventLocation">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Duration</label>
                    <div class="radio-group">
                        <div class="radio-item">
                            <input type="radio" id="noDuration" name="duration" value="none" checked>
                            <label for="noDuration">Without duration</label>
                        </div>
                        <div class="radio-item">
                            <input type="radio" id="untilDuration" name="duration" value="until">
                            <label for="untilDuration">Until</label>
                        </div>
                    </div>
                    <div class="duration-inputs" id="untilInputs">
                        <div class="date-time-group">
                            <select id="endMonth">
                                <option value="1">January</option>
                                <option value="2">February</option>
                                <option value="3">March</option>
                                <option value="4">April</option>
                                <option value="5">May</option>
                                <option value="6">June</option>
                                <option value="7">July</option>
                                <option value="8">August</option>
                                <option value="9">September</option>
                                <option value="10">October</option>
                                <option value="11">November</option>
                                <option value="12">December</option>
                            </select>
                            <select id="endDay">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                                <option value="6">6</option>
                                <option value="7">7</option>
                                <option value="8">8</option>
                                <option value="9">9</option>
                                <option value="10">10</option>
                                <option value="11">11</option>
                                <option value="12">12</option>
                                <option value="13">13</option>
                                <option value="14">14</option>
                                <option value="15">15</option>
                                <option value="16">16</option>
                                <option value="17">17</option>
                                <option value="18">18</option>
                                <option value="19">19</option>
                                <option value="20">20</option>
                                <option value="21">21</option>
                                <option value="22">22</option>
                                <option value="23">23</option>
                                <option value="24">24</option>
                                <option value="25">25</option>
                                <option value="26">26</option>
                                <option value="27">27</option>
                                <option value="28">28</option>
                                <option value="29">29</option>
                                <option value="30">30</option>
                                <option value="31">31</option>
                            </select>
                            <input type="number" class="form-input" id="endYear" value="2024" readonly>
                        </div>
                        <div class="time-group">
                            <select id="endHour">
                                <option value="0">12 AM</option>
                                <option value="1">1 AM</option>
                                <option value="2">2 AM</option>
                                <option value="3">3 AM</option>
                                <option value="4">4 AM</option>
                                <option value="5">5 AM</option>
                                <option value="6">6 AM</option>
                                <option value="7">7 AM</option>
                                <option value="8">8 AM</option>
                                <option value="9">9 AM</option>
                                <option value="10">10 AM</option>
                                <option value="11">11 AM</option>
                                <option value="12">12 PM</option>
                                <option value="13">1 PM</option>
                                <option value="14">2 PM</option>
                                <option value="15">3 PM</option>
                                <option value="16">4 PM</option>
                                <option value="17">5 PM</option>
                                <option value="18">6 PM</option>
                                <option value="19">7 PM</option>
                                <option value="20">8 PM</option>
                                <option value="21">9 PM</option>
                                <option value="22">10 PM</option>
                                <option value="23">11 PM</option>
                            </select>
                            <select id="endMinute">
                                <option value="0">00</option>
                                <option value="15">15</option>
                                <option value="30">30</option>
                                <option value="45">45</option>
                            </select>
                        </div>
                    </div>
                </div>
                

            </form>
        </div>
        <div class="modal-footer">
            <div class="required-note">There are required fields in this form marked ⓘ</div>
            <button class="save-btn" onclick="saveEvent()">Save</button>
        </div>
    </div>
</div>

<!-- Day Summary Modal -->
<div class="modal-overlay" id="daySummaryModal">
    <div class="modal-content">
        <div class="modal-header">
            <div class="modal-title">Events for <span id="summaryDate"></span></div>
            <button class="close-btn" onclick="closeDaySummary()">×</button>
        </div>
        <div class="modal-body">
            <div id="eventsList">
                <!-- Events will be loaded here -->
            </div>
            <div class="summary-actions">
                <button class="add-btn" onclick="openEventModal()">Add New Event</button>
                <button class="debug-btn" onclick="debugEvents()" style="background: #6c757d; color: white; margin-left: 10px; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">Debug Events</button>
                <button class="test-btn" onclick="createTestEvent()" style="background: #ffc107; color: #000; margin-left: 10px; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">Create Test Event</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Event Selection Modal -->
<div class="modal-overlay" id="editSelectionModal">
    <div class="modal-content">
        <div class="modal-header">
            <div class="modal-title">Select Event to Edit</div>
            <button class="close-btn" onclick="closeEditSelection()">×</button>
        </div>
        <div class="modal-body">
            <div id="editEventsList">
                <!-- Events with checkboxes will be loaded here -->
            </div>
        </div>
        <div class="modal-footer">
            <button class="edit-btn" onclick="editSelectedEvent()">Edit Selected</button>
        </div>
    </div>
</div>

<script>
    let selectedDate = null;
    let currentEvents = [];
    let selectedEventId = null;
    
    function showDaySummary(date, dayNumber) {
        selectedDate = new Date(date);
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                           'July', 'August', 'September', 'October', 'November', 'December'];
        const monthName = monthNames[selectedDate.getMonth()];
        
        document.getElementById('summaryDate').textContent = `${monthName} ${dayNumber}`;
        
        // Load events for this date
        loadDayEvents(date);
        
        document.getElementById('daySummaryModal').style.display = 'flex';
    }
    
    function loadDayEvents(date) {
        console.log('Loading events for date:', date); // Debug log
        fetch(`/Student/GetEvents?date=${date}`)
            .then(response => {
                console.log('GetEvents response status:', response.status); // Debug log
                return response.json();
            })
            .then(data => {
                console.log('GetEvents response data:', data); // Debug log
                if (data.success) {
                    currentEvents = data.events;
                    displayEvents(data.events);
                } else {
                    console.error('Failed to load events:', data.message);
                }
            })
            .catch(error => {
                console.error('Error loading events:', error);
            });
    }
    
    function displayEvents(events) {
        console.log('Displaying events:', events); // Debug log
        const eventsList = document.getElementById('eventsList');
        
        if (!events || events.length === 0) {
            eventsList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No events for this day.</p>';
            return;
        }
        
        let html = `
            <div class="events-table">
                <div class="events-header">
                    <div class="event-col">Event Title</div>
                    <div class="event-col">Type of event</div>
                    <div class="event-col">Duration</div>
                    <div class="event-col">Actions</div>
                </div>
        `;
        
        events.forEach(event => {
            console.log('Processing event:', event); // Debug log for each event
            const startTime = new Date(event.startDate);
            const endTime = event.endDate ? new Date(event.endDate) : null;
            
            const durationStr = endTime ? 
                `${formatDate(startTime)} - ${formatDate(endTime)}` : 
                'No duration';
            
            // Extract event type from title (remove the hyphen prefix)
            const eventType = event.title.startsWith('-') ? event.title.substring(1) : event.title;
            
            html += `
                <div class="event-row">
                    <div class="event-col">${event.title}</div>
                    <div class="event-col">${eventType}</div>
                    <div class="event-col">${durationStr}</div>
                    <div class="event-col">
                        <button class="edit-btn" onclick="editEvent(${event.id})">Edit</button>
                        <button class="delete-btn" onclick="deleteEvent(${event.id})">Delete</button>
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        eventsList.innerHTML = html;
        console.log('Final HTML:', html); // Debug log for the final HTML
    }
    
    function formatDate(date) {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                           'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return `${monthNames[date.getMonth()]} ${date.getDate()}`;
    }
    
    function formatTime(date) {
        let hours = date.getHours();
        const minutes = date.getMinutes();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        const minutesStr = minutes.toString().padStart(2, '0');
        return `${hours}:${minutesStr} ${ampm}`;
    }
    
    function openEventModal(date = null) {
        // Reset form and errors
        document.getElementById('eventForm').reset();
        document.getElementById('titleError').style.display = 'none';
        document.getElementById('typeError').style.display = 'none';
        
        if (date) {
            selectedDate = new Date(date);
        }
        
        if (selectedDate) {
            document.getElementById('eventDay').value = selectedDate.getDate();
            document.getElementById('eventMonth').value = selectedDate.getMonth() + 1;
            document.getElementById('eventYear').value = selectedDate.getFullYear();
        }
        
        // Set default time to 9 AM
        document.getElementById('eventHour').value = 9;
        document.getElementById('eventMinute').value = 0;
        
        // Reset duration
        document.querySelector('input[name="duration"][value="none"]').checked = true;
        document.getElementById('untilInputs').classList.remove('show');
        
        document.getElementById('eventModal').style.display = 'flex';
        document.getElementById('daySummaryModal').style.display = 'none';
    }
    
    function closeEventModal() {
        document.getElementById('eventModal').style.display = 'none';
        document.getElementById('eventForm').reset();
        selectedDate = null;
    }
    
    function closeDaySummary() {
        document.getElementById('daySummaryModal').style.display = 'none';
        currentEvents = [];
    }
    
    function closeEditSelection() {
        document.getElementById('editSelectionModal').style.display = 'none';
        selectedEventId = null;
    }
    
    function showEditSelection() {
        const editEventsList = document.getElementById('editEventsList');
        
        if (currentEvents.length === 0) {
            editEventsList.innerHTML = '<p>No events to edit.</p>';
            return;
        }
        
        let html = '';
        currentEvents.forEach(event => {
            const startTime = new Date(event.startDate);
            html += `
                <div class="edit-event-item">
                    <input type="radio" name="editEvent" value="${event.id}" id="event${event.id}">
                    <label for="event${event.id}">
                        ${event.title} - ${formatTime(startTime)}
                    </label>
                </div>
            `;
        });
        
        editEventsList.innerHTML = html;
        document.getElementById('editSelectionModal').style.display = 'flex';
    }
    
    function editSelectedEvent() {
        const selectedRadio = document.querySelector('input[name="editEvent"]:checked');
        if (!selectedRadio) {
            alert('Please select an event to edit.');
            return;
        }
        
        selectedEventId = parseInt(selectedRadio.value);
        const event = currentEvents.find(e => e.id === selectedEventId);
        
        if (event) {
            // Populate the form with event data
            document.getElementById('eventTitle').value = event.title.replace('-', '');
            document.getElementById('eventType').value = event.title.replace('-', '');
            document.getElementById('eventDescription').value = event.description || '';
            document.getElementById('eventLocation').value = event.location || '';
            
            const startDate = new Date(event.startDate);
            document.getElementById('eventDay').value = startDate.getDate();
            document.getElementById('eventMonth').value = startDate.getMonth() + 1;
            document.getElementById('eventYear').value = startDate.getFullYear();
            document.getElementById('eventHour').value = startDate.getHours();
            document.getElementById('eventMinute').value = startDate.getMinutes();
            
            if (event.endDate) {
                const endDate = new Date(event.endDate);
                document.querySelector('input[name="duration"][value="until"]').checked = true;
                document.getElementById('untilInputs').classList.add('show');
                document.getElementById('endDay').value = endDate.getDate();
                document.getElementById('endMonth').value = endDate.getMonth() + 1;
                document.getElementById('endYear').value = endDate.getFullYear();
                document.getElementById('endHour').value = endDate.getHours();
                document.getElementById('endMinute').value = endDate.getMinutes();
            } else {
                document.querySelector('input[name="duration"][value="none"]').checked = true;
                document.getElementById('untilInputs').classList.remove('show');
            }
            
            closeEditSelection();
            document.getElementById('eventModal').style.display = 'flex';
        }
    }
    
    function deleteEvent(eventId) {
        if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
            fetch(`/Student/DeleteEvent/${eventId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload events for the current date
                    if (selectedDate) {
                        loadDayEvents(selectedDate.toISOString().split('T')[0]);
                    }
                    
                    // Also refresh the dashboard's to-do list if we're on the dashboard
                    refreshDashboardTodoList();
                    
                    // Close the day summary modal if it's open
                    const daySummaryModal = document.getElementById('daySummaryModal');
                    if (daySummaryModal && daySummaryModal.style.display === 'flex') {
                        daySummaryModal.style.display = 'none';
                    }
                    
                    // Refresh the calendar display to update event indicators
                    refreshCalendarDisplay();
                    
                    // Show success message
                    alert('Event deleted successfully!');
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the event.');
            });
        }
    }
    
    function refreshDashboardTodoList() {
        // Check if we're on the dashboard page
        if (window.location.pathname.includes('/Student/Dashboard')) {
            // Reload the dashboard page to refresh the to-do list
            window.location.reload();
        } else {
            // If we're on the calendar page, we can also refresh the dashboard in a new tab
            // or send a message to the parent window if it's in an iframe
            console.log('Dashboard refresh needed - event deleted from calendar');
        }
    }
    
    function refreshCalendarDisplay() {
        // Reload the current page to refresh the calendar grid
        // This will update the event indicators on the calendar
        window.location.reload();
    }
    
    function editEvent(eventId) {
        // Find the event in currentEvents
        const event = currentEvents.find(e => e.id === eventId);
        if (event) {
            selectedEventId = eventId;
            
            // Populate the form with event data
            document.getElementById('eventTitle').value = event.title.replace('-', '');
            document.getElementById('eventType').value = event.title.replace('-', '');
            document.getElementById('eventDescription').value = event.description || '';
            document.getElementById('eventLocation').value = event.location || '';
            
            const startDate = new Date(event.startDate);
            document.getElementById('eventDay').value = startDate.getDate();
            document.getElementById('eventMonth').value = startDate.getMonth() + 1;
            document.getElementById('eventYear').value = startDate.getFullYear();
            document.getElementById('eventHour').value = startDate.getHours();
            document.getElementById('eventMinute').value = startDate.getMinutes();
            
            if (event.endDate) {
                const endDate = new Date(event.endDate);
                document.querySelector('input[name="duration"][value="until"]').checked = true;
                document.getElementById('untilInputs').classList.add('show');
                document.getElementById('endDay').value = endDate.getDate();
                document.getElementById('endMonth').value = endDate.getMonth() + 1;
                document.getElementById('endYear').value = endDate.getFullYear();
                document.getElementById('endHour').value = endDate.getHours();
                document.getElementById('endMinute').value = endDate.getMinutes();
            } else {
                document.querySelector('input[name="duration"][value="none"]').checked = true;
                document.getElementById('untilInputs').classList.remove('show');
            }
            
            // Close day summary and open event modal
            document.getElementById('daySummaryModal').style.display = 'none';
            document.getElementById('eventModal').style.display = 'flex';
        }
    }
    
    function debugEvents() {
        console.log('=== DEBUG INFO ===');
        console.log('Selected Date:', selectedDate);
        console.log('Current Events:', currentEvents);
        
        if (selectedDate) {
            const dateStr = selectedDate.toISOString().split('T')[0];
            console.log('Date String:', dateStr);
            
            // Test the API call
            fetch(`/Student/GetEvents?date=${dateStr}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('API Response:', data);
                    if (data.success) {
                        console.log('Events from API:', data.events);
                        alert(`Found ${data.events.length} events for ${dateStr}`);
                    } else {
                        alert('API Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                    alert('Fetch Error: ' + error.message);
                });
        } else {
            alert('No date selected');
        }
    }
    
    function createTestEvent() {
        fetch('/Student/CreateTestEvent')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Test event created! ID: ' + data.eventId);
                    // Reload events for the current date
                    if (selectedDate) {
                        const dateStr = selectedDate.toISOString().split('T')[0];
                        console.log('Reloading events after test creation for date:', dateStr);
                        loadDayEvents(dateStr);
                    }
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while creating test event.');
            });
    }
    
    function changeMonth(offset) {
        const currentUrl = new URL(window.location);
        const currentMonth = new Date('@currentMonth.ToString("yyyy-MM-dd")');
        const newMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + offset, 1);
        
        currentUrl.searchParams.set('month', newMonth.getFullYear() + '-' + (newMonth.getMonth() + 1).toString().padStart(2, '0'));
        window.location.href = currentUrl.toString();
    }
    
    // Handle duration radio buttons
    document.querySelectorAll('input[name="duration"]').forEach(radio => {
        radio.addEventListener('change', function() {
            document.getElementById('untilInputs').classList.remove('show');
            
            if (this.value === 'until') {
                document.getElementById('untilInputs').classList.add('show');
            }
        });
    });
    
    function saveEvent() {
        const title = document.getElementById('eventTitle').value.trim();
        const eventType = document.getElementById('eventType').value;
        const month = document.getElementById('eventMonth').value;
        const day = document.getElementById('eventDay').value;
        const year = document.getElementById('eventYear').value;
        const hour = document.getElementById('eventHour').value;
        const minute = document.getElementById('eventMinute').value;
        
        // Validate required fields
        if (!title) {
            document.getElementById('titleError').style.display = 'block';
            return;
        } else {
            document.getElementById('titleError').style.display = 'none';
        }
        
        if (!eventType) {
            document.getElementById('typeError').style.display = 'block';
            return;
        } else {
            document.getElementById('typeError').style.display = 'none';
        }
        
        // Create the display title with hyphen prefix like in the image
        const displayTitle = `-${eventType}`;
        
        // Create start date with time
        const startDate = new Date(
            parseInt(year),
            parseInt(month) - 1,
            parseInt(day),
            parseInt(hour),
            parseInt(minute),
            0
        );
        
        const eventData = {
            title: displayTitle, // Use the display title with hyphen
            description: document.getElementById('eventDescription').value,
            location: document.getElementById('eventLocation').value,
            startDate: startDate.toISOString()
        };
        
        // Handle duration if "until" is selected
        const durationType = document.querySelector('input[name="duration"]:checked').value;
        if (durationType === 'until') {
            const endMonth = document.getElementById('endMonth').value;
            const endDay = document.getElementById('endDay').value;
            const endYear = document.getElementById('endYear').value;
            const endHour = document.getElementById('endHour').value;
            const endMinute = document.getElementById('endMinute').value;
            
            const endDate = new Date(
                parseInt(endYear),
                parseInt(endMonth) - 1,
                parseInt(endDay),
                parseInt(endHour),
                parseInt(endMinute),
                0
            );
            eventData.endDate = endDate.toISOString();
        }
        
        const url = selectedEventId ? `/Student/UpdateEvent/${selectedEventId}` : '/Student/CreateEvent';
        const method = selectedEventId ? 'PUT' : 'POST';
        
        console.log('Saving event:', eventData); // Debug log
        
        fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(eventData)
        })
        .then(response => {
            console.log('Response status:', response.status); // Debug log
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data); // Debug log
            if (data.success) {
                closeEventModal();
                selectedEventId = null;
                
                // Always refresh the day summary if we have a selected date
                if (selectedDate) {
                    const dateStr = selectedDate.toISOString().split('T')[0];
                    console.log('Refreshing events for date:', dateStr); // Debug log
                    loadDayEvents(dateStr);
                    document.getElementById('daySummaryModal').style.display = 'flex';
                } else {
                    location.reload(); // Refresh to show new event
                }
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while saving the event.');
        });
    }
    
    // Close modal when clicking outside
    document.getElementById('eventModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeEventModal();
        }
    });
</script> 